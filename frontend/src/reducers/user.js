import {createReducer} from "@reduxjs/toolkit"
const initialstate={
    loading:true,
};
export const userReducer=createReducer(initialstate,builder=>{   
   builder
    .addCase("GET_USER_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("GET_USER_SUCCESS",(state,action)=>{
        state.loading=false;
        state.user=action.payload;
    })
    .addCase("GET_USER_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
    .addCase("CLEAR_ERRORS",(state)=>{
        state.error=true; 
    })
})
export const login=createReducer({},builder=>{   
    builder
     .addCase("LOGIN_REQUEST",(state)=>{
         state.loading=true;
         state.isauthenticated=false;     
     })                                            
     .addCase("LOGIN_SUCCESS",(state,action)=>{
         state.loading=false;
         state.isauthenticated=true;
         state.message=action.payload;
     })
     .addCase("LOGIN_FAILURE",(state,action)=>{
         state.loading=false;
         state.error=action.payload;
         state.isauthenticated=false;
     })
     .addCase("LOGOUT_REQUEST",(state)=>{
        state.loading=true; 
    })                                            
    .addCase("LOGOUT_SUCCESS",(state,action)=>{
        state.loading=false;
        state.isauthenticated=false;
        state.user=null;
        state.message=action.payload;
    })
    .addCase("LOGOUT_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
        state.isauthenticated=true;
    })
    .addCase("CLEAR_ERRORS",(state)=>{
        state.error=true; 
    })
    .addCase("CLEAR_MESSAGE",(state)=>{
        state.message=true; 
    })      
    .addCase("USER_LOAD_REQUEST",(state)=>{
        state.loading=true; 
        state.isauthenticated=false;
    })                                            
    .addCase("USER_LOAD_SUCCESS",(state,action)=>{
        state.loading=false;
        state.isauthenticated=true;
        state.user=action.payload;
    })
    .addCase("USER_LOAD_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
        state.isauthenticated=false;
    })
 })
 export const updateReducer=createReducer(initialstate,builder=>{   
    builder
     .addCase("UPDATE_USER_REQUEST",(state)=>{
         state.loading=true;     
     })                                            
     .addCase("UPDATE_USER_SUCCESS",(state,action)=>{
         state.loading=false;
         state.message=action.payload;
     })
     .addCase("UPDATE_USER_FAILURE",(state,action)=>{
         state.loading=false;
         state.error=action.payload;
     })
     .addCase("ADD_TL_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("ADD_TL_SUCCESS",(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    })
    .addCase("ADD_TL_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
    .addCase("DELETE_TL_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("DELETE_TL_SUCCESS",(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    })
    .addCase("DELETE_TL_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
    .addCase("ADD_PROJECT_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("ADD_PROJECT_SUCCESS",(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    })
    .addCase("ADD_PROJECT_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
    .addCase("DELETE_PROJECT_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("DELETE_PROJECT_SUCCESS",(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    })
    .addCase("DELETE_PROJECT_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
    .addCase("CONTACT_REQUEST",(state)=>{
        state.loading=true;     
    })                                            
    .addCase("CONTACT_SUCCESS",(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    })
    .addCase("CONTACT_FAILURE",(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    })
     .addCase("CLEAR_ERRORS",(state)=>{
         state.error=true; 
     })
     .addCase("CLEAR_MESSAGE",(state)=>{
        state.message=true; 
    })     
 })